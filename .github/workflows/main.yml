name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/test-app:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/test-app:latest
    
    - name: SSH into EC2 and deploy
      uses: appleboy/ssh-action@master
      with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            sudo apt-get update
            

            kubectl apply -f - <<EOF
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: test-app
            spec:
              replicas: 2
              strategy:
                type: RollingUpdate
                rollingUpdate:
                  maxUnavailable: 0
                  maxSurge: 1
              selector:
                matchLabels:
                  app: test-app
              template:
                metadata:
                  labels:
                    app: test-app
                spec:
                  containers:
                  - name: test-app
                    image: ${{ secrets.DOCKER_USERNAME }}/test-app:latest
                    ports:
                    - containerPort: 80

            ---

            apiVersion: v1
            kind: Service
            metadata:
              name: test-app-service
              labels:
                app: test-app
            spec:
              selector:
                app: test-app
              ports:
                - protocol: TCP
                  port: 80
                  targetPort: 80
                  nodePort: 30000
              type: NodePort
            EOF
           


   

    # - name: Notify success
    #   if: success()
    #   run: echo "Deployment successful!"
